extern crate libc;

use std::default::Default;

pub trait Hash {
  fn update(&mut self, input: &[u8]);
  fn digest(&mut self) -> Vec<u8>;
}

<% [ # FIXME: Verify / calculate these sizes on non-OSX.
  ['MD5', 92],
  ['SHA', 96],
  ['SHA256', 112],
  ['SHA512', 216]
].each do |context, size| %>
#[repr(C)] struct <%= context %>_CTX { content: [u8; <%= size %>] }

impl Default for <%= context %>_CTX {
  fn default() -> <%= context %>_CTX {
    return <%= context%>_CTX { content: [0; <%= size %>] };
  }
}
<% end %>

<% [
['MD5', 'MD5', 16, "d41d8cd98f00b204e9800998ecf8427e", "9e107d9d372bb6826bd81d3542a419d6"],
['SHA1', 'SHA', 20, "da39a3ee5e6b4b0d3255bfef95601890afd80709", "2fd4e1c67a2d28fced849ee1bb76e7391b93eb12"],
['SHA224', 'SHA256', 28, "d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f", "730e109bd7a8a32b1cb9d9a09aa2325d2430587ddbc0c38bad911525"],
['SHA256', 'SHA256', 32, "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855", "d7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592"],
['SHA384', 'SHA512', 48, "38b060a751ac96384cd9327eb1b1e36a21fdb71114be07434c0cc7bf63f6e1da274edebfe76f65fbd51ad2f14898b95b", "ca737f1014a48f4c0b6dd43cb177b0afd9e5169367544c494011e3317dbf9a509cb1e5dc1e85a941bbee3d7f2afbc9b1"],
['SHA512', 'SHA512', 64, "cf83e1357eefb8bdf1542850d66d8007d620e4050b5715dc83f4a921d36ce9ce47d0d13c5d85f2b0ff8318d2877eec2f63b931bd47417a81a538327af927da3e", "07e547d9586f6a73f73fbac0435ed76951218fb7d0c8d788a309d785436bbb642e93a252a954f23912547d1e8a3b5ed6e1bfd7097821233fa0538f3db854fee6"]
].each do |name, context, result_size, null_hash, foxy_hash| %>
#[link(name = "crypto")]
extern {
  fn <%= name %>_Init(context: *mut <%= context %>_CTX) -> libc::c_int;
  fn <%= name %>_Update(context: *mut <%= context %>_CTX, data: *const u8, length: libc::c_ulong) -> libc::c_int;
  fn <%= name %>_Final(result: *mut u8, context: *mut <%= context %>_CTX) -> libc::c_int;
}

pub struct <%= name %> { context: <%= context %>_CTX }

impl <%= name %> {
  pub fn new() -> <%= name %> {
    let mut context: <%= context %>_CTX = Default::default();

    if unsafe { <%= name %>_Init(&mut context) } != 1 {
      panic!("Failed to initialize <%= name %> state");
    }

    return <%= name %> { context: context }
  }
}

impl Hash for <%= name %> {
  fn update(&mut self, input: &[u8]) {
    let err = unsafe { <%= name %>_Update(&mut self.context, input.as_ptr(), input.len() as u64) };

    if err != 1 { panic!("Failed to update <%= name %> state") }
  }

  fn digest(&mut self) -> Vec<u8> {
    let mut result = [0u8; <%= result_size %>];

    let err = unsafe { <%= name %>_Final((&mut result[..]).as_mut_ptr(), &mut self.context) };

    if err != 1 { panic!("Failed to finalize <%= name %> state") }

    return result.to_vec();
  }
}

#[test]
fn calculates_null_<%= name.downcase %>_hash() {
  let mut hash = <%= name %>::new();

  let null_hash = &[<%= null_hash.each_char.each_slice(2).map { |x| "0x#{x.join}" }.join(', ') %>];
  let digest = hash.digest();

  for i in 0 .. null_hash.len() {
    assert_eq!(digest[i], null_hash[i]);
  }
}

#[test]
fn calculates_foxy_<%= name.downcase %>_hash() {
  let mut hash = <%= name %>::new();

  hash.update(b"The quick brown fox jumps over the lazy dog");

  let foxy_hash = &[<%= foxy_hash.each_char.each_slice(2).map { |x| "0x#{x.join}" }.join(', ') %>];
  let digest = hash.digest();

  for i in 0 .. foxy_hash.len() {
    assert_eq!(digest[i], foxy_hash[i]);
  }
}

<% end %>
